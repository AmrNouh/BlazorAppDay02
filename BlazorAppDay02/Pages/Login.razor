@page "/Login"
@using Website.Shared.Models

<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5 ">
                <div class="alert alert-danger @ErrorMessage()">User Name or Password incorrect</div>
                <div class="card bg-dark text-white my-0 py-0" style="border-radius: 1rem;">
                    <div class="card-body p-4 text-center">

                        <div class="mb-md-5 mt-md-4 pb-3">

                            <h2 class="fw-bold mb-2 text-uppercase">Login</h2>
                            <p class="text-white-50 mb-5">Please enter your login and password!</p>

                            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                                <DataAnnotationsValidator />
                                <div class="form-group mb-4">
                                    <label class="form-label float-start" for="typeUserName">Username</label>
                                    <InputText @bind-Value="model.UserName" class="form-control" />
                                    <ValidationMessage class="text-start" For="@(() => model.UserName)" />
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label float-start" for="typePassword">Password</label>
                                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                                    <ValidationMessage class="text-start" For="@(() => model.Password)" />
                                </div>
                                <button disabled="@loading" class="btn btn-primary">
                                    @if (loading)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                    Login
                                </button>
                            </EditForm>
                            <p class="small mb-3 pb-lg-2"><a class="text-white-50 text-decoration-none" href="#">Forgot password?</a></p>

                            <div class="d-flex justify-content-center text-center mt-3 pt-1">
                                <a href="#" class="text-white"><i class="fab fa-facebook-f fa-lg"></i></a>
                                <a href="#" class="text-white"><i class="fab fa-twitter fa-lg mx-4 px-2"></i></a>
                                <a href="#" class="text-white"><i class="fab fa-google fa-lg"></i></a>
                            </div>
                        </div>

                        <div>
                            <p class="mb-0">
                                Don't have an account? <NavLink href="register" class="text-white-50 fw-bold text-decoration-none">Sign Up</NavLink>
                            </p>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public EventCallback<User> OnUserLogin { get; set; }

    private bool hasErrors = false;

    private async void OnValidSubmit()
    {
        AlertService.Clear();
        loading = true;
        try
        {
            await AccountService.Login(model);
            if (AccountService.User is null)
            {
                hasErrors = true;
                StateHasChanged();
                NavigationManager.NavigateTo("login",true);
            }
            await OnUserLogin.InvokeAsync(AccountService.User);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private string ErrorMessage()
    {
        return hasErrors ? "d-block" : "d-none";
    }
}